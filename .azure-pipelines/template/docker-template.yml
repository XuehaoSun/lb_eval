parameters:
  - name: repoName
    type: string
    default: "lb_eval"
  - name: repoTag
    type: string
    default: "py310"
  - name: dockerFileName
    type: string
    default: "Dockerfile"
  - name: containerName
    type: string
    default: "model_eval"
  - name: repo
    type: string
    default: "https://github.com/intel-sandbox/lb_eval"
  - name: scriptsPath
    type: string
    default: "ITREX/cpu"
  - name: hardware
    type: string

steps:
  - task: Bash@3
    inputs:
      targetType: "inline"
      script: |
        docker ps -a
        if [[ $(docker ps -a | grep -i '${{ parameters.containerName }}'$) ]]; then
            docker start $(docker ps -aq)
            echo "remove left files through container ..."
            docker exec ${{ parameters.containerName }} bash -c "ls -a /lb_eval && rm -fr /lb_eval/* && rm -fr /lb_eval/.* && ls -a /lb_eval  || true"
        fi
    displayName: "Docker workspace clean up"

  - script: |
      if [[ ! $(docker images | grep -i ${{ parameters.repoName }}:${{ parameters.repoTag }}) ]]; then
        cd ${BUILD_SOURCESDIRECTORY}/evaluation/${{parameters.scriptsPath}}
        if [ "${{ parameters.hardware }}" == "cpu" ]; then
          docker build -f ${{parameters.dockerFileName}} --build-arg http_proxy=${http_proxy} --build-arg https_proxy=${http_proxy} -t ${{ parameters.repoName }}:${{ parameters.repoTag }} .
        elif [ "${{ parameters.hardware }}" == "gpu" ]; then
          # echo "Reuse local gpu docker image."
          docker build -f ${{parameters.dockerFileName}} --build-arg http_proxy=$(gpu_proxy) --build-arg https_proxy=$(gpu_proxy) -t ${{ parameters.repoName }}:${{ parameters.repoTag }} .
        fi
      fi
      docker images | grep -i ${{ parameters.repoName }}
      if [[ $? -ne 0 ]]; then
        echo "NO Such Docker Image"
        exit 1
      fi
    displayName: "Build develop docker image"

  - script: |
      docker stop $(docker ps -aq)
      docker rm -vf ${{ parameters.containerName }} || true
      env | sort
    displayName: "Clean docker container"

  - task: Bash@3
    inputs:
      targetType: "inline"
      script: |
        if [ "${{ parameters.hardware }}" == "cpu" ]; then
          docker run -dit --disable-content-trust --privileged --name=${{ parameters.containerName }} --shm-size="2g" \
            -e http_proxy=$(cpu_proxy) -e https_proxy=$(cpu_proxy) \
            -v ${BUILD_SOURCESDIRECTORY}:/lb_eval \
            -v /home/sdp/.cache/huggingface:/dataset \
            ${{ parameters.repoName }}:${{ parameters.repoTag }}
        elif [ "${{ parameters.hardware }}" == "gpu" ]; then
          docker run -dit  --disable-content-trust --privileged --name=${{ parameters.containerName }} --shm-size="2g" \
              --runtime=nvidia --gpus all \
              -e http_proxy=$(gpu_proxy) -e https_proxy=$(gpu_proxy) \
              -v ${BUILD_SOURCESDIRECTORY}:/lb_eval ${{ parameters.repoName }}:${{ parameters.repoTag }}
        else
          echo "Hardware ${{ parameters.hardware }} not supported"
          exit 1
        fi
        echo "Show the container list after docker run ... "
        docker ps -a
    displayName: "Docker run - ${{ parameters.hardware }} - ${{ parameters.containerName }} Container"